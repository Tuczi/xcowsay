use control_code::SGR::Color;
use std::os::raw::c_ulong;

const CSI_COLORS_SIZE: usize = 256;
const CSI_COLORS_MAP: [u32; CSI_COLORS_SIZE] = [
    0x0000_0000,
    0x0080_0000,
    0x0000_8000,
    0x0080_8000,
    0x0000_0080,
    0x0080_0080,
    0x0000_8080,
    0x00c0_c0c0,
    0x0080_8080,
    0x00ff_0000,
    0x0000_ff00,
    0x00ff_ff00,
    0x0000_00ff,
    0x00ff_00ff,
    0x0000_ffff,
    0x00ff_ffff,
    0x0000_0000,
    0x0000_005f,
    0x0000_0087,
    0x0000_00af,
    0x0000_00df,
    0x0000_00ff,
    0x0000_5f00,
    0x0000_5f5f,
    0x0000_5f87,
    0x0000_5faf,
    0x0000_5fdf,
    0x0000_5fff,
    0x0000_8700,
    0x0000_875f,
    0x0000_8787,
    0x0000_87af,
    0x0000_87df,
    0x0000_87ff,
    0x0000_af00,
    0x0000_af5f,
    0x0000_af87,
    0x0000_afaf,
    0x0000_afdf,
    0x0000_afff,
    0x0000_df00,
    0x0000_df5f,
    0x0000_df87,
    0x0000_dfaf,
    0x0000_dfdf,
    0x0000_dfff,
    0x0000_ff00,
    0x0000_ff5f,
    0x0000_ff87,
    0x0000_ffaf,
    0x0000_ffdf,
    0x0000_ffff,
    0x005f_0000,
    0x005f_005f,
    0x005f_0087,
    0x005f_00af,
    0x005f_00df,
    0x005f_00ff,
    0x005f_5f00,
    0x005f_5f5f,
    0x005f_5f87,
    0x005f_5faf,
    0x005f_5fdf,
    0x005f_5fff,
    0x005f_8700,
    0x005f_875f,
    0x005f_8787,
    0x005f_87af,
    0x005f_87df,
    0x005f_87ff,
    0x005f_af00,
    0x005f_af5f,
    0x005f_af87,
    0x005f_afaf,
    0x005f_afdf,
    0x005f_afff,
    0x005f_df00,
    0x005f_df5f,
    0x005f_df87,
    0x005f_dfaf,
    0x005f_dfdf,
    0x005f_dfff,
    0x005f_ff00,
    0x005f_ff5f,
    0x005f_ff87,
    0x005f_ffaf,
    0x005f_ffdf,
    0x005f_ffff,
    0x0087_0000,
    0x0087_005f,
    0x0087_0087,
    0x0087_00af,
    0x0087_00df,
    0x0087_00ff,
    0x0087_5f00,
    0x0087_5f5f,
    0x0087_5f87,
    0x0087_5faf,
    0x0087_5fdf,
    0x0087_5fff,
    0x0087_8700,
    0x0087_875f,
    0x0087_8787,
    0x0087_87af,
    0x0087_87df,
    0x0087_87ff,
    0x0087_af00,
    0x0087_af5f,
    0x0087_af87,
    0x0087_afaf,
    0x0087_afdf,
    0x0087_afff,
    0x0087_df00,
    0x0087_df5f,
    0x0087_df87,
    0x0087_dfaf,
    0x0087_dfdf,
    0x0087_dfff,
    0x0087_ff00,
    0x0087_ff5f,
    0x0087_ff87,
    0x0087_ffaf,
    0x0087_ffdf,
    0x0087_ffff,
    0x00af_0000,
    0x00af_005f,
    0x00af_0087,
    0x00af_00af,
    0x00af_00df,
    0x00af_00ff,
    0x00af_5f00,
    0x00af_5f5f,
    0x00af_5f87,
    0x00af_5faf,
    0x00af_5fdf,
    0x00af_5fff,
    0x00af_8700,
    0x00af_875f,
    0x00af_8787,
    0x00af_87af,
    0x00af_87df,
    0x00af_87ff,
    0x00af_af00,
    0x00af_af5f,
    0x00af_af87,
    0x00af_afaf,
    0x00af_afdf,
    0x00af_afff,
    0x00af_df00,
    0x00af_df5f,
    0x00af_df87,
    0x00af_dfaf,
    0x00af_dfdf,
    0x00af_dfff,
    0x00af_ff00,
    0x00af_ff5f,
    0x00af_ff87,
    0x00af_ffaf,
    0x00af_ffdf,
    0x00af_ffff,
    0x00df_0000,
    0x00df_005f,
    0x00df_0087,
    0x00df_00af,
    0x00df_00df,
    0x00df_00ff,
    0x00df_5f00,
    0x00df_5f5f,
    0x00df_5f87,
    0x00df_5faf,
    0x00df_5fdf,
    0x00df_5fff,
    0x00df_8700,
    0x00df_875f,
    0x00df_8787,
    0x00df_87af,
    0x00df_87df,
    0x00df_87ff,
    0x00df_af00,
    0x00df_af5f,
    0x00df_af87,
    0x00df_afaf,
    0x00df_afdf,
    0x00df_afff,
    0x00df_df00,
    0x00df_df5f,
    0x00df_df87,
    0x00df_dfaf,
    0x00df_dfdf,
    0x00df_dfff,
    0x00df_ff00,
    0x00df_ff5f,
    0x00df_ff87,
    0x00df_ffaf,
    0x00df_ffdf,
    0x00df_ffff,
    0x00ff_0000,
    0x00ff_005f,
    0x00ff_0087,
    0x00ff_00af,
    0x00ff_00df,
    0x00ff_00ff,
    0x00ff_5f00,
    0x00ff_5f5f,
    0x00ff_5f87,
    0x00ff_5faf,
    0x00ff_5fdf,
    0x00ff_5fff,
    0x00ff_8700,
    0x00ff_875f,
    0x00ff_8787,
    0x00ff_87af,
    0x00ff_87df,
    0x00ff_87ff,
    0x00ff_af00,
    0x00ff_af5f,
    0x00ff_af87,
    0x00ff_afaf,
    0x00ff_afdf,
    0x00ff_afff,
    0x00ff_df00,
    0x00ff_df5f,
    0x00ff_df87,
    0x00ff_dfaf,
    0x00ff_dfdf,
    0x00ff_dfff,
    0x00ff_ff00,
    0x00ff_ff5f,
    0x00ff_ff87,
    0x00ff_ffaf,
    0x00ff_ffdf,
    0x00ff_ffff,
    0x0008_0808,
    0x0012_1212,
    0x001c_1c1c,
    0x0026_2626,
    0x0030_3030,
    0x003a_3a3a,
    0x0044_4444,
    0x004e_4e4e,
    0x0058_5858,
    0x0060_6060,
    0x0066_6666,
    0x0076_7676,
    0x0080_8080,
    0x008a_8a8a,
    0x0094_9494,
    0x009e_9e9e,
    0x00a8_a8a8,
    0x00b2_b2b2,
    0x00bc_bcbc,
    0x00c6_c6c6,
    0x00d0_d0d0,
    0x00da_dada,
    0x00e4_e4e4,
    0x00ee_eeee,
];

/// Represents RGB color as 24-bit integer value (8-bit per color).
///
/// # Dev notes
/// 24-bit value is stored on less significant bits of `u32`.
pub struct RgbColor(u32);

impl RgbColor {
    pub const fn white() -> RgbColor {
        RgbColor(0x00FF_FFFF)
    }

    pub const fn black() -> RgbColor {
        RgbColor(0x0000_0000)
    }

    /// Converts `control-code::sgr::Color` into `RgbColor`.
    pub fn from(sgr_color: Color, default: RgbColor) -> Self {
        match sgr_color {
            Color::Index(index) => {
                // Technically only default color and code colors from range 30-37 and 40-47 should become brighter with bold option so
                // "\x1B[1;31m" should become color from index 9 (1+8) but "\x1B[38;5;1m" should stay the same (color from index 1).
                // so this implementation has a bug for the second variant that I don't want to fix now as `control_code` lib does not distinguish that
                // TODO add second field to RgbColor - bold_color
                if index == 8 {
                    // without this `if` we would use black color even for foreground. TODO remove it once bold is implemented as that should make colo lighter
                    default
                } else {
                    RgbColor(CSI_COLORS_MAP[usize::from(index)])
                }
            }

            Color::Rgb(r, g, b) => {
                RgbColor((u32::from(r) << 16) | (u32::from(g) << 8) | u32::from(b))
            }
            Color::Default => default,
            Color::Transparent => {
                //TODO implement Transparent color eventually.
                log::warn!("Unimplemented transparent color. Using default.");
                default
            }
            _ => {
                // It is simple to implement CMY/CMYK conversion but hard to google if it is 0-100 range or 0-255
                log::debug!(
                    "Ignoring CMY/CMYK as they are not supported in many terminals. {:?}",
                    sgr_color
                );
                default
            }
        }
    }
}

impl From<RgbColor> for c_ulong {
    fn from(color: RgbColor) -> Self {
        color.0 as c_ulong
    }
}
